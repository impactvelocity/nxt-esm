async function n(t){const e=typeof t=="string"?{code:t}:t;if(!e?.code)throw new Error("esm.sh [build] <400> missing code");const r=await fetch("https://esm.sh/build",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(i=>i.json());if(r.error)throw new Error(`esm.sh [build] <${r.error.status}> ${r.error.message}`);return r}async function u(t,...e){const r=String.raw({raw:t},...e),i=await o(r);return{...await import(i.url),_build:i}}async function o(t){let e=t;if(globalThis.crypto&&globalThis.crypto.subtle&&(e=await s(t)),globalThis.localStorage){const i=localStorage.getItem(e);if(i)return JSON.parse(i)}const r=await n(t);return globalThis.localStorage&&localStorage.setItem(e,JSON.stringify(r)),r}async function s(t){const e=await crypto.subtle.digest("SHA-1",new TextEncoder().encode(t));return Array.from(new Uint8Array(e)).map(r=>r.toString(16).padStart(2,"0")).join("")}var l=n;export{n as build,l as default,u as esm,s as hashText};
